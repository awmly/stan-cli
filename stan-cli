#! /bin/bash

######################################
#### STAN Command Line Interface #####
############# LOCAL BIN ##############
########### VERSION 1.0.9 ############
######## DATE 12:19 - 01/08/17 #######
######################################

# Get passed arguments
METHOD="$1"
ARGS=("$@")

# Set vars
HR===============================================

# Set text colours
GREEN=`tput setaf 2`
RED=`tput setaf 1`
RESET=`tput sgr0`

# Set complete strings
UPLOAD="${GREEN}✔ UPLOAD COMPLETE ${RESET}"
REBASE="${GREEN}✔ REBASE COMPLETE ${RESET}"
IMPORT="${GREEN}✔ DATABASE IMPORTED ${RESET}"
EXPORT="${GREEN}✔ DATABASE EXPORTED ${RESET}"
DBCONF="${GREEN}✔ DATABASE CONFIG FILES CREATED ${RESET}"
SNAPSHOT="${GREEN}✔ SNAPSHOT CREATED ${RESET}"
DEPLOY="${GREEN}✔ SITE DEPLOYED TO PRODUCTION ${RESET}"
RESTORE="${GREEN}✔ RESTORE COMPLETE ${RESET}"
OPTIMISE="${GREEN}✔ IMAGE OPTIMISATION COMPLETE ${RESET}"
HELP="For a list of available commands see - https://github.com/awomersley/stan-cli"

# Set error strings
NOTFOUND="${RED}COMMAND NOT FOUND${RESET}"
RESTOREERROR="${RED}RESTORE SNAPSHOT NOT FOUND${RESET}"

# Set Propts
DEPLOYPROMPT="This will copy the staging database and httpdocs to the production server - are you sure?"
RESTOREPROMPT="This will delete the current production server and restore it from a snapshot - are you sure?"
UPLOADPROMPT="This will upload to"

# Define get config var function
getConfigVar(){

  if [ -f "staging/config/config.php" ]; then

    DIR="staging/"

  else

    DIR="httpdocs/"

  fi

  # Include config file and echo out variable - discard any php warnings/notices
  php -r "include('${DIR}/config/config.php'); echo ${1};" 2> /dev/null

}

# Define prompt function
prompt(){

  # Confirm
  echo "${1}"

  # Show Y/N choices
  select YN in "Yes" "No"
  do
      case $YN in
          Yes ) break;;
          No ) exit;;
      esac
  done

}

# Define check if dir is empty function
checkIfDirIsEmpty(){

  # Check if dir is empty - except for git folder auto created by github app
  if  [ "$(ls -A | grep -v .git)" ]; then
    echo $HR
    echo "$NOTEMPTY"
    echo "$NOTEMPTY2"
    echo $HR
    exit 1
  fi

}

# Define upload method
if [ "$METHOD" = "upload" ]; then

  # Get remote from config
  REMOTE=$( getConfigVar "REMOTE" )

  # Get staging server config
  STAGING_SERVER=$( getConfigVar "STAGING_SERVER" )

  # Check which env to upload to
  if [ "$STAGING_SERVER" = "1" ]; then

    # Staging
    REMOTE_PATH="staging/"

  else

    # Production
    REMOTE_PATH="httpdocs/"

  fi

  # If upload is scripts
  if [ "${ARGS[1]}" = "scripts" ]; then

    # Set permissions
    chmod 0755 stan-cli scripts/*

    # Upload scripts
    rsync -trp --omit-dir-times --delete scripts/ ${REMOTE}scripts/

    # Upload stan-cli
    rsync -trp --omit-dir-times --delete stan-cli ${REMOTE}stan-cli

  elif [ "${ARGS[1]}" = "cacheimages" ]; then

    rsync -trp --omit-dir-times httpdocs/cache/images/ ${REMOTE}${REMOTE_PATH}cache/images/

  else

    # Set folder permissions
    find httpdocs/* -type d -print0 | xargs -0 chmod 0755
    find httpdocs/* -type f -print0 | xargs -0 chmod 0644
    chmod -R 0777 uploads httpdocs/cache

    # Remove source maps from minified files
    stan remove-sourcemaps

    # Show prompt
    prompt "${UPLOADPROMPT} ${REMOTE}${REMOTE_PATH}"

    # Delete local params
    rm httpdocs/cache/params/* 2> /dev/null

    # Upload httpdocs
    rsync -trp --omit-dir-times --delete --exclude=cache/images --exclude=cache/media --exclude=cache/tmp httpdocs/ ${REMOTE}${REMOTE_PATH}

    # Upload cache images (without --delete flag)
    rsync -trp --omit-dir-times httpdocs/cache/images/ ${REMOTE}${REMOTE_PATH}cache/images/
    rsync -trp --omit-dir-times httpdocs/cache/media/ ${REMOTE}${REMOTE_PATH}cache/media/

    # Upload uploads
    rsync -trp --omit-dir-times uploads/ ${REMOTE}uploads/

    # Upload to CDN
    if [ "${ARGS[1]}" != "code" ]; then
      grunt cloudfiles
    fi

    # Clear cache/uploads directories
    rm -f uploads/images/*
    rm -f httpdocs/cache/images/*

  fi

  # Show complete text
  echo $HR
  echo $UPLOAD
  echo $HR

# Define remove-sourcemaps method
elif [ "$METHOD" = "remove-sourcemaps" ]; then

  # Get site ID
  VHOST=$( getConfigVar "VHOST" )

  # Remove css maps
  sed -i '' 's/sourceMappingURL=.*\.map//g' httpdocs/cache/assets/${VHOST}-*.css

  # Remove js maps
  sed -i '' 's/\/\/# sourceMappingURL=[^;]*//g' httpdocs/cache/assets/${VHOST}-*.js

# Define deploy method
elif [ "$METHOD" = "deploy" ]; then

  # Confirm deployment
  prompt "$DEPLOYPROMPT"

  # Create snapshot
  stan snapshot

  # Clear cache
  rm -rf staging/cache/views/*

  # Copy staging to production
  rsync -trp --omit-dir-times --delete --exclude=cache/images --exclude=cache/media staging/ httpdocs/

  # Copy staging cache to production cache (without --delete flag)
  rsync -trp --omit-dir-times staging/cache/images/ httpdocs/cache/images/
  rsync -trp --omit-dir-times staging/cache/media/ httpdocs/cache/media/

  # Export staging db
  stan db exportstaging

  # Load in to production db
  stan db importproduction

  # Load custom deploy
  scripts/deploy.sh

  # Show complete text
  echo $HR
  echo $DEPLOY
  echo $HR

# Define snapshot method
elif [ "$METHOD" = "snapshot" ]; then

  # Get domain
  DOMAIN=$( getConfigVar "DOMAIN" )

  # Set timestamp
  TIMESTAMP=$( date +"%Y-%m-%d_%H-%M-%S" )

  # Create db conf files
  stan db conf

  # Export production db
  stan db exportproduction

  # Move db to archive folder
  mv database/database.sql httpdocs/database.sql

  # Make archive directory
  tar -zcvf snapshots/${DOMAIN}-${TIMESTAMP}.tar.gz httpdocs/ uploads/ > /dev/null

  # Show complete text
  echo $HR
  echo $SNAPSHOT
  echo $HR

# Define restore method
elif [ "$METHOD" = "restore" ]; then

  # Confirm restore
  prompt "$RESTOREPROMPT"

  # Check restore file is present
  if [ -f "${ARGS[1]}" ]; then

    # Extract restore file
    tar -zxvf ${ARGS[1]} -C snapshots/ > /dev/null

    # Move database to database folder
    mv snapshots/httpdocs/database.sql database/database.sql

    # Restore database
    stan db importproduction

    # Clear cache to avoid permission issues
    rm -f httpdocs/cache/images/*

    # Restore httpdocs
    rsync -trp --omit-dir-times --delete snapshots/httpdocs/ httpdocs/ > /dev/null

    # Ensure cache directory is writeable
    chmod -R 0777 httpdocs/cache 2> /dev/null

    # Delete extracted folder
    rm -rf snapshots/httpdocs

    # Show complete text
    echo $HR
    echo $RESTORE
    echo $HR

  else

    # Show error text
    echo $HR
    echo $RESTOREERROR
    echo $HR

  fi

# Define syncdb method
elif [ "$METHOD" = "db" ]; then

  if [ "${ARGS[1]}" = "conf" ]; then

    # Get production db variables from config
    DBHOST=$( getConfigVar "DBHOST" )
    DBUSER=$( getConfigVar "DBUSER" )
    DBPASS=$( getConfigVar "DBPASS" )

    # Create production mysql cnf file
    echo "[client]" > database/production.cnf
    echo "host = ${DBHOST}" >> database/production.cnf
    echo "user = ${DBUSER}" >> database/production.cnf
    echo "password = ${DBPASS}" >> database/production.cnf

    # Get staging db variables from config
    DBHOST=$( getConfigVar "DBHOST_STAGING" )
    DBUSER=$( getConfigVar "DBUSER_STAGING" )
    DBPASS=$( getConfigVar "DBPASS_STAGING" )

    # Create staging mysql cnf file
    echo "[client]" > database/staging.cnf
    echo "host = ${DBHOST}" >> database/staging.cnf
    echo "user = ${DBUSER}" >> database/staging.cnf
    echo "password = ${DBPASS}" >> database/staging.cnf

    # Get local db variables from config
    DBHOST=$( getConfigVar "DBHOST_LOCAL" )
    DBUSER=$( getConfigVar "DBUSER_LOCAL" )
    DBPASS=$( getConfigVar "DBPASS_LOCAL" )

    # Create local mysql cnf file
    echo "[client]" > database/local.cnf
    echo "host = ${DBHOST}" >> database/local.cnf
    echo "user = ${DBUSER}" >> database/local.cnf
    echo "password = ${DBPASS}" >> database/local.cnf

    # Show complete text
    echo $HR
    echo $DBCONF
    echo $HR

  elif [ "${ARGS[1]}" = "synclocal" ]; then

    # Get staging server value
    STAGING_SERVER=$( getConfigVar "STAGING_SERVER" )

    # If staging server is active
    if [ "$STAGING_SERVER" = "1" ]; then

      # Export staging
      stan db exportstaging

    else

      # Export production
      stan db exportproduction

    fi

    # Import in to local
    stan db importlocal

  elif [ "${ARGS[1]}" = "exportproduction" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/production.cnf --complete-insert --default-character-set=utf8 $DBNAME ${ARGS[2]} > database/database.sql

    # Show complete text
    echo $HR
    echo $EXPORT
    echo $HR

  elif  [ "${ARGS[1]}" = "importproduction" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME" )

    # Load database
    mysql --defaults-extra-file=database/production.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $HR
    echo $IMPORT
    echo $HR

  elif [ "${ARGS[1]}" = "exportstaging" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_STAGING" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/staging.cnf --complete-insert --default-character-set=utf8 $DBNAME ${ARGS[2]} > database/database.sql

    # Show complete text
    echo $HR
    echo $EXPORT
    echo $HR

  elif  [ "${ARGS[1]}" = "importstaging" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_STAGING" )

    # Load database
    mysql --defaults-extra-file=database/staging.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $HR
    echo $IMPORT
    echo $HR

  elif [ "${ARGS[1]}" = "exportlocal" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_LOCAL" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/local.cnf --complete-insert --default-character-set=utf8 $DBNAME ${ARGS[2]} > database/database.sql

    # Show complete text
    echo $HR
    echo $EXPORT
    echo $HR

  elif  [ "${ARGS[1]}" = "importlocal" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_LOCAL" )

    # Load database
    mysql --defaults-extra-file=database/local.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $HR
    echo $IMPORT
    echo $HR

  else

    echo $HR
    echo $NOTFOUND
    echo $HR

  fi

# Define speed test method
elif [ "$METHOD" = "speedtest" ]; then

  # Get SIET_URL from config file
  SITE_URL=$( getConfigVar "SITE_URL" )
  API_KEY=$( getConfigVar "GOOGLE_API_KEY" )

  # Run sitespeed.io test
  sitespeed.io -u $SITE_URL -r tests/sitespeed.io/ -j 20 -s /contact-us --gpsiKey API_KEY

  # Run GT Metrix (Page speed and Y Slow)
  php tests/gtmetrix/run-test.php

# Define rebase method
elif [ "$METHOD" = "rebase" ]; then

  # Get current git status
  GIT_STATUS=$( git status )

  # Check if there are any unstaged files
  if [[ $GIT_STATUS == *"nothing to commit"* ]]; then

    # Rebase master
    git pull --rebase -p origin master

  else

    # Clear any pervious stashes
    git stash clear

    # Stash any un-commited files
    git stash

    # Rebase master
    git pull --rebase -p origin master

    # Unstash files
    git stash apply

  fi

  # Show complete text
  echo $HR
  echo $REBASE
  echo $HR

# Define reset method
elif [ "$METHOD" = "reset" ]; then

  # Prompt!
  # Reset to last commit
  git reset --hard HEAD

# Define optimise method
elif [ "$METHOD" = "optimise" ]; then

  jpegoptim httpdocs/assets/frontend/images/*.jpg
  optipng -o5 httpdocs/assets/frontend/images/*.png

  echo $HR
  echo $OPTIMISE
  echo $HR

# Define default action
elif [ "$METHOD" = "" ]; then

  # Rebase from remote
  stan rebase

  # Install node/bower/composer dependencies
  stan dependencies

  # Build JS/CSS libraries
  stan build

  # Open atom
  atom ./

  # Start mysql server
  mysql.server start

  # Make sure local db is clean
  mysql --defaults-extra-file=database/local.cnf --execute='drop database stan;create database stan;'

  # Export current remote db and load it in to local server
  stan db synclocal

  # Open frontend and backend in Chrome as background tasks
  sleep 1 && open -a 'Google Chrome' http://stan:4000/base/ &
  sleep 2 && open -a 'Google Chrome' http://stan:4000/ &

  # Start grunt server
  grunt serve

# Define help method
else

  echo $HR
  echo $HELP
  echo $HR

fi
