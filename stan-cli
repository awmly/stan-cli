#! /bin/sh

######################################
#### STAN Command Line Interface #####
############# LOCAL BIN ##############
########### VERSION 1.0.0 ############
######## DATE 19:05 - 03/02/15 #######
######################################

# Get passed arguments
METHOD="$1";
ARGS=("$@");

# Set vars
HR===============================================;

# Set text colours
GREEN=`tput setaf 2`
RED=`tput setaf 1`
RESET=`tput sgr0`

# Set complete strings
UPLOAD="${GREEN}✔ UPLOAD COMPLETE ${RESET}"
REBASE="${GREEN}✔ REBASE COMPLETE ${RESET}"
IMPORTREMOTE="${GREEN}✔ DATABASE IMPORTED TO REMOTE ${RESET}"
IMPORTLOCAL="${GREEN}✔ DATABASE IMPORTED TO LOCAL ${RESET}"
EXPORTREMOTE="${GREEN}✔ REMOTE DATABASE EXPORTED ${RESET}"
EXPORTLOCAL="${GREEN}✔ LOCAL DATABASE EXPORTED ${RESET}"
DBCONF="${GREEN}✔ DATABASE CONFIG FILES CREATED ${RESET}"

# Define install Grunt function
installGrunt(){

  npm install
  bower install
  composer install
  grunt update

}


# Define check if dir is empty function
checkIfDirIsEmpty(){

  # Check if dir is empty
  if  [ "$(ls -A)" ]; then
    echo $HR
    echo $NOTEMPTY
    echo $HR
    exit 1
  fi

}


# Define check if stan is installed function
checkIfStanIsInstalled(){

  # Check if stan-cli file exists
  if [ ! -f "./stan-cli" ]; then
    echo $HR
    echo $NOSTAN
    echo $HR
    exit 1
  fi

}


# Define get config var function
getConfigVar(){

  # Include config file and echo out variable
  php -r "include('httpdocs/config/config.php'); echo ${1};"

}


# Define get remote database function
exportRemoteDatabase(){

  # Get database name
  DBNAME=$( getConfigVar "DBNAME" )

  # Run mysqldump command
  mysqldump --defaults-extra-file=database/remote.cnf --complete-insert --default-character-set=utf8 $DBNAME > database/database.sql

}

# Define get remote database function
exportLocalDatabase(){

  # Get database name
  DBNAME=$( getConfigVar "DBNAME_LOCAL" )

  # Run mysqldump command
  mysqldump --defaults-extra-file=database/local.cnf --complete-insert --default-character-set=utf8 $DBNAME > database/database.sql

}


# Define get remote database function
importRemoteDatabase(){

  # Get database name
  DBNAME=$( getConfigVar "DBNAME" )

  # Load database
  mysql --defaults-extra-file=database/remote.cnf $DBNAME < database/database.sql
}


# Define get remote database function
importLocalDatabase(){

  # Get database name
  DBNAME=$( getConfigVar "DBNAME_LOCAL" )

  # Load database
  mysql --defaults-extra-file=database/local.cnf $DBNAME < database/database.sql

}

# Define upload method
if [ "$METHOD" = "upload" ]; then

  # Set folder permissions
  find httpdocs/* -type d -print0 | xargs -0 chmod 0755
  find httpdocs/* -type f -print0 | xargs -0 chmod 0644
  chmod -R 0777 httpdocs/cache

  # Get remote config
  REMOTE=$( getConfigVar "REMOTE" )

  # Run rsync command
  rsync -trp --omit-dir-times --delete --exclude=cache/images --exclude=cache/tmp --exclude=cache/null httpdocs/ $REMOTE

  # Upload to CDN
  grunt cloudfiles

  # Show complete text
  echo $HR
  echo $UPLOAD
  echo $HR

# Define syncdb method
elif [ "$METHOD" = "db" ]; then

  if [ "${ARGS[1]}" = "conf" ]; then

    # Get remote db variables from config
    DBHOST=$( getConfigVar "DBHOST" )
    DBUSER=$( getConfigVar "DBUSER" )
    DBPASS=$( getConfigVar "DBPASS" )

    # Create mysql cnf file
    echo "[client]" > database/remote.cnf
    echo "host = ${DBHOST}" >> database/remote.cnf
    echo "user = ${DBUSER}" >> database/remote.cnf
    echo "password = ${DBPASS}" >> database/remote.cnf

    # Get local db variables from config
    DBHOST=$( getConfigVar "DBHOST_LOCAL" )
    DBUSER=$( getConfigVar "DBUSER_LOCAL" )
    DBPASS=$( getConfigVar "DBPASS_LOCAL" )

    # Create mysql cnf file
    echo "[client]" > database/local.cnf
    echo "host = ${DBHOST}" >> database/local.cnf
    echo "user = ${DBUSER}" >> database/local.cnf
    echo "password = ${DBPASS}" >> database/local.cnf

    # Show complete text
    echo $HR
    echo $DBCONF
    echo $HR

  elif [ "${ARGS[1]}" = "remotetolocal" ]; then

    # Export the remote database
    stan db exportremote

    # Load the database in to local mysql server
    stan db importlocal

  elif [ "${ARGS[1]}" = "localtoremote" ]; then

    # Export the local database
    stan db exportlocal

    # Load the database in to remote mysql server
    stan db importremote

  elif [ "${ARGS[1]}" = "exportremote" ]; then

    # Export the local database
    exportRemoteDatabase

    # Show complete text
    echo $HR
    echo $EXPORTREMOTE
    echo $HR

  elif [ "${ARGS[1]}" = "exportlocal" ]; then

    # Export the local database
    exportLocalDatabase

    # Show complete text
    echo $HR
    echo $EXPORTLOCAL
    echo $HR

  elif [ "${ARGS[1]}" = "importremote" ]; then

    # Export the local database
    importRemoteDatabase

    # Show complete text
    echo $HR
    echo $IMPORTREMOTE
    echo $HR

  elif [ "${ARGS[1]}" = "importlocal" ]; then

    # Export the local database
    importLocalDatabase

    # Show complete text
    echo $HR
    echo $IMPORTLOCAL
    echo $HR

  fi

# Define speed test method
elif [ "$METHOD" = "speedtest" ]; then

  # Get SIET_URL from config file
  SITE_URL=$( getConfigVar "SITE_URL" )

  # Run sitespeed.io test
  sitespeed.io -u $SITE_URL -r tests/sitespeed.io/ -j 20 -s /contact-us

  # Run GT Metrix (Page speed and Y Slow)
  php tests/gtmetrix/run-test.php

# Define rebase method
elif [ "$METHOD" = "rebase" ]; then

  # Get current git status
  GIT_STATUS=$( git status )

  # Check if there are any unstaged files
  if [[ $GIT_STATUS == *"nothing to commit"* ]]; then

    # Rebase master
    git pull --rebase -p origin master

  else

    # Stash any un-commited files
    git stash

    # Rebase master
    git pull --rebase -p origin master

    # Unstash files
    git stash apply

  fi

  # Show complete text
  echo $HR
  echo $REBASE
  echo $HR

# Define default action
elif [ "$METHOD" = "" ]; then

  # Rebase from rmeote
  stan rebase

  # Update libs
  grunt update

  # Open atom
  atom ./

  # Start mysql server
  mysql.server start

  # Get sync db value from config
  SYNC_DB=$( getConfigVar "SYNC_DB" )

  # If sync db is on then download remote database
  if [ "$SYNC_DB" = "1" ]; then

    exportRemoteDatabase

  fi

  # Import database.sql file in to local mysql server
  importLocalDatabase

  # Open frontend and backend in Chrome
  open -a 'Google Chrome' http://stan:4000/stan/
  open -a 'Google Chrome' http://stan:4000/

  # Start grunt server
  grunt serve

# Define help method
else

  echo "HELP"

fi
