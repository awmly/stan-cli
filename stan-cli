#! /bin/sh

######################################
#### STAN Command Line Interface #####
############# LOCAL BIN ##############
########### VERSION 1.0.0 ############
######## DATE 15:25 - 04/02/15 #######
######################################

# Get passed arguments
METHOD="$1";
ARGS=("$@");

# Set vars
HR===============================================;

# Set text colours
GREEN=`tput setaf 2`
RED=`tput setaf 1`
RESET=`tput sgr0`

# Set complete strings
UPLOAD="${HR}\n${GREEN}✔ UPLOAD COMPLETE ${RESET}\n${HR}"
REBASE="${HR}\n${GREEN}✔ REBASE COMPLETE ${RESET}\n${HR}"
IMPORT="${HR}\n${GREEN}✔ DATABASE IMPORTED ${RESET}\n${HR}"
EXPORT="${HR}\n${GREEN}✔ DATABASE EXPORTED ${RESET}\n${HR}"
DBCONF="${HR}\n${GREEN}✔ DATABASE CONFIG FILES CREATED ${RESET}\n${HR}"
NOTFOUND="${HR}\n${RED}COMMAND NOT FOUND${RESET}\n${HR}"

# Define install Grunt function
installGrunt(){

  npm install
  bower install
  composer install
  grunt update

}


# Define check if dir is empty function
checkIfDirIsEmpty(){

  # Check if dir is empty - except for git folder auto created by github app
  if  [ "$(ls -A | grep -v .git)" ]; then
    echo $NOTEMPTY
    exit 1
  fi

}


# Define check if stan is installed function
checkIfStanIsInstalled(){

  # Check if stan-cli file exists
  if [ ! -f "./stan-cli" ]; then
    echo $NOSTAN
    exit 1
  fi

}


# Define get config var function
getConfigVar(){

  # Include config file and echo out variable
  php -r "include('httpdocs/config/config.php'); echo ${1};"

}

# Define upload method
if [ "$METHOD" = "upload" ]; then

  # Set folder permissions
  find httpdocs/* -type d -print0 | xargs -0 chmod 0755
  find httpdocs/* -type f -print0 | xargs -0 chmod 0644
  chmod -R 0777 httpdocs/cache

  # Check which remote to upload to
  if [ "${ARGS[1]}" = "production" ]; then

    # Get remote config for production
    REMOTE=$( getConfigVar "REMOTE" )

  else

    # Get remote config for staging
    REMOTE=$( getConfigVar "REMOTE_STAGING" )

  fi

  # Run rsync command
  rsync -trp --omit-dir-times --delete --exclude=cache/images --exclude=cache/tmp --exclude=cache/null httpdocs/ $REMOTE

  # Upload to CDN
  grunt cloudfiles

  # Show complete text
  echo $UPLOAD

# Define syncdb method
elif [ "$METHOD" = "db" ]; then

  if [ "${ARGS[1]}" = "conf" ]; then

    # Get production db variables from config
    DBHOST=$( getConfigVar "DBHOST" )
    DBUSER=$( getConfigVar "DBUSER" )
    DBPASS=$( getConfigVar "DBPASS" )

    # Create production mysql cnf file
    echo "[client]" > database/production.cnf
    echo "host = ${DBHOST}" >> database/production.cnf
    echo "user = ${DBUSER}" >> database/production.cnf
    echo "password = ${DBPASS}" >> database/production.cnf

    # Get staging db variables from config
    DBHOST=$( getConfigVar "DBHOST_STAGING" )
    DBUSER=$( getConfigVar "DBUSER_STAGING" )
    DBPASS=$( getConfigVar "DBPASS_STAGING" )

    # Create staging mysql cnf file
    echo "[client]" > database/staging.cnf
    echo "host = ${DBHOST}" >> database/staging.cnf
    echo "user = ${DBUSER}" >> database/staging.cnf
    echo "password = ${DBPASS}" >> database/staging.cnf

    # Get local db variables from config
    DBHOST=$( getConfigVar "DBHOST_LOCAL" )
    DBUSER=$( getConfigVar "DBUSER_LOCAL" )
    DBPASS=$( getConfigVar "DBPASS_LOCAL" )

    # Create local mysql cnf file
    echo "[client]" > database/local.cnf
    echo "host = ${DBHOST}" >> database/local.cnf
    echo "user = ${DBUSER}" >> database/local.cnf
    echo "password = ${DBPASS}" >> database/local.cnf

    # Show complete text
    echo $DBCONF

  elif [ "${ARGS[1]}" = "exportproduction" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/production.cnf --complete-insert --default-character-set=utf8 $DBNAME > database/database.sql

    # Show complete text
    echo $EXPORT

  elif  [ "${ARGS[1]}" = "importproduction" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME" )

    # Load database
    mysql --defaults-extra-file=database/production.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $IMPORT

  elif [ "${ARGS[1]}" = "exportstaging" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_STAGING" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/staging.cnf --complete-insert --default-character-set=utf8 $DBNAME > database/database.sql

    # Show complete text
    echo $EXPORT

  elif  [ "${ARGS[1]}" = "importstaging" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_STAGING" )

    # Load database
    mysql --defaults-extra-file=database/staging.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $IMPORT

  elif [ "${ARGS[1]}" = "exportlocal" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_LOCAL" )

    # Run mysqldump command
    mysqldump --defaults-extra-file=database/local.cnf --complete-insert --default-character-set=utf8 $DBNAME > database/database.sql

    # Show complete text
    echo $EXPORT

  elif  [ "${ARGS[1]}" = "importlocal" ]; then

    # Get database name
    DBNAME=$( getConfigVar "DBNAME_LOCAL" )

    # Load database
    mysql --defaults-extra-file=database/local.cnf $DBNAME < database/database.sql

    # Show complete text
    echo $IMPORT

  else

    echo $NOTFOUND

  fi

# Define speed test method
elif [ "$METHOD" = "speedtest" ]; then

  # Get SIET_URL from config file
  SITE_URL=$( getConfigVar "SITE_URL" )

  # Run sitespeed.io test
  sitespeed.io -u $SITE_URL -r tests/sitespeed.io/ -j 20 -s /contact-us

  # Run GT Metrix (Page speed and Y Slow)
  php tests/gtmetrix/run-test.php

# Define rebase method
elif [ "$METHOD" = "rebase" ]; then

  # Get current git status
  GIT_STATUS=$( git status )

  # Check if there are any unstaged files
  if [[ $GIT_STATUS == *"nothing to commit"* ]]; then

    # Rebase master
    git pull --rebase -p origin master

  else

    # Stash any un-commited files
    git stash

    # Rebase master
    git pull --rebase -p origin master

    # Unstash files
    git stash apply

  fi

  # Show complete text
  echo $REBASE

# Define optimise method
elif [ "$METHOD" = "optimise" ]; then

  jpegoptim httpdocs/assets/frontend/images/*.jpg
  optipng -o5 httpdocs/assets/frontend/images/*.png

# Define default action
elif [ "$METHOD" = "" ]; then

  # Rebase from remote
  stan rebase

  # Update libs
  grunt update

  # Open atom
  atom ./

  # Start mysql server
  mysql.server start

  # Export current staging db and local it in to local server
  stan db exportstaging
  stan db importlocal

  # Open frontend and backend in Chrome
  open -a 'Google Chrome' http://stan:4000/stan/
  open -a 'Google Chrome' http://stan:4000/

  # Start grunt server
  grunt serve

# Define help method
else

  echo "HELP"

fi
